require "spec_helper"

describe Tacokit::Client::Boards do
  describe "#board", :vcr do
    it "returns a token authorized board" do
      board = app_client.board(test_board_link)

      expect(board.name).to eq("Test Board")
    end

    it "returns oauth authorized board" do
      board = oauth_client.board(test_board_link)

      expect(board.name).to eq("Test Board")
    end
  end

  describe "#board_field", :vcr do
    it "returns a value" do
      name = app_client.board_field(test_board_link, :name)

      expect(name["_value"]).to eq("Test Board")
    end

    it "returns an array" do
      power_ups = app_client.board_field(test_board_link, :power_ups)

      expect(power_ups).to eq([])
    end

    it "returns a hash" do
      label_names = app_client.board_field(test_board_link, :label_names)

      expect(label_names.to_attrs).to include(:green, :yellow, :orange)
    end
  end

  describe "#board_resource", :vcr do
    it "returns board members" do
      members = app_client.board_resource(test_board_link, :members)

      expect(members).not_to be_empty

      member = members.first
      expect(member.username).to be_present
    end
  end

  describe "#board_actions", :vcr do
    it "returns board actions" do
      actions = app_client.board_actions(test_board_link)

      expect(actions).not_to be_empty

      action = actions.first
      expect(action.member_creator.full_name).to be_present
    end
  end

  describe "#board_stars", :vcr do
    it "returns board stars" do
      stars = app_client.board_stars(test_board_link)

      expect(stars).not_to be_empty

      expect(stars.first.board_id).to eq(test_board_id)
    end
  end

  describe "#board_cards", :vcr do
    it "returns board cards" do
      cards = app_client.board_cards(test_board_link)

      expect(cards).not_to be_empty

      card = cards.first
      expect(card.pos).to be_present
    end
  end

  describe "#board_checklists", :vcr do
    it "returns board checklists" do
      checklists = app_client.board_checklists(test_board_link)

      expect(checklists).not_to be_empty

      checklist = checklists.first
      expect(checklist.name).to eq "Test Checklist 1"
    end
  end

  describe "#board_labels", :vcr do
    it "returns board labels" do
      labels = app_client.board_labels(test_board_link)

      expect(labels).not_to be_empty

      label = labels.first
      expect(label.name).to eq "Blue Label"
    end
  end

  describe "#board_lists", :vcr do
    it "returns board lists" do
      lists = app_client.board_lists(test_board_link)

      expect(lists).not_to be_empty

      list = lists.first
      expect(list.name).to eq "Test List 1"
    end
  end

  describe "#board_members", :vcr do
    it "returns board members" do
      members = app_client.board_members(test_board_link)

      expect(members).not_to be_empty

      member = members.first
      expect(member.username).to eq "rossta"
    end
  end

  describe "#board_preferences", :vcr do
    it "returns preferences for a board" do
      prefs = app_client.board_preferences(test_board_link)

      expect(prefs.show_sidebar).to be_truthy
    end
  end

  describe "#board_organization", :vcr do
    it "returns board organization" do
      organization = app_client.board_organization(test_board_link)

      expect(organization.name).to eq "teamtacokit"
    end
  end

  describe "#update_board", :vcr do
    it "updates a board" do
      board = app_client.update_board(test_board_id, desc: "This board is for Tacokit testing")

      expect(board.desc).to eq "This board is for Tacokit testing"
      assert_requested :put, trello_url_template("boards/#{test_board_id}{?key,token}")
    end

    it "updates nested resource" do
      board = app_client.update_board(test_board_id, label_names: { blue: "Blue Label" })

      expect(board.label_names.to_attrs).to include blue: "Blue Label"
    end
  end

  describe "#create_board", :vcr do
    before do
      @board = oauth_client.create_board("Autoboard", desc: "This board was generated by tests")
    end

    it "creates a board" do
      expect(@board.name).to eq("Autoboard")
      expect(@board.desc).to eq("This board was generated by tests")
      assert_requested :post, trello_url_template("boards{?key,token}"),
        body: {
          "name" => "Autoboard",
          "desc" => "This board was generated by tests"
        }
    end

    after do
      app_client.update_board @board.id, closed: true
    end
  end

  describe "#add_board_member", :vcr do
    it "adds invites member to board" do
      @member = member = app_client.add_board_member(test_board_id, "rossta+tacokit2@example.com", "Taco Kit2")

      expect(member.email).to eq "rossta+tacokit2@example.com"
    end

    after do
      app_client.delete("boards/#{test_board_id}/members/#{@member.id}")
    end
  end

  describe "#update_board_member", :vcr do
    before do
      @member = app_client.add_board_member(test_board_id, "rossta+tacokit@example.com", "Taco Kit3")
    end

    it "updates member" do
      membership = app_client.update_board_member(test_board_id, @member.id, "normal")
      expect(membership.id).to_not be_nil
    end

    after do
      app_client.delete("boards/#{test_board_id}/members/#{@member.id}")
    end
  end
end
